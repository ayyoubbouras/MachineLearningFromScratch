
'''
https://stackoverflow.com/questions/4981815/how-to-remove-lines-in-a-matplotlib-plot
the first response explains objects in matplotlib so well
'''


import matplotlib.pyplot as plt
from random import choice
import numpy as np
from matplotlib.animation import FuncAnimation
from matplotlib import *
from pylab import *
import numpy as np
import time
import matplotlib.pyplot as plt

figure, ax = plt.subplots(figsize=(10, 8))

# setting x-axis label and y-axis label
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')

X=np.array([[-0.16245334,-1.03974018]
,[-1.05214915,-0.68157219]
,[1.74043582,0.79070118]
,[0.40998253,1.22692428]
,[-0.46872307,-0.44582973]
,[3.95702821,-0.10177937]
,[-1.86245936,-0.63096559]
,[-1.76761177,-0.87901887]
,[1.18082814,-0.98720965]
,[-0.69803675,1.67337187]
,[-1.5477015,-1.19241389]
,[0.43657328,0.7177618]
,[-1.98969852,-0.67130603]
,[-1.65338654,-0.98774999]
,[0.34040973,1.31088917]
,[0.09937208,1.58312899]
,[-0.6702876,-0.59926975]
,[-1.14932404,-0.9670084]
,[1.17413901,0.90789255]
,[-0.3716144,-1.54564386]
,[-2.53728538,-1.59858956]
,[1.09258495,0.64946562]
,[0.88239619,0.83276427]
,[-0.88265844,-1.17074792]
,[0.29350941,-1.14797069]
,[-0.72812391,-0.78571711]
,[0.5235596,-0.90207181]
,[0.01868843,-1.35944781]
,[0.16552739,-0.97209247]
,[-0.6821695,0.0771749]
,[0.61464958,0.92700593]
,[-0.0945534,-1.05082675]
,[-0.75320505,-0.071654]
,[0.95084904,1.22639753]
,[-1.74178123,-0.38242486]
,[0.25558783,1.52365867]
,[2.42311673,0.2699716]
,[1.3825008,1.10849859]
,[-1.88201437,-0.31989913]
,[0.52568606,1.58259479]
,[2.90205188,0.46238839]
,[2.73220674,0.14957967]
,[1.91983009,0.87368969]
 ,[-1.47197138,-1.34088017]
, [ 1.13109138 , 0.94589058]
 ,[ 0.71205348 ,-1.59704536]
 ,[ 0.54885016 ,-1.74825959]
 ,[-1.16069898 ,-1.02716184]
 ,[ 1.72976256 , 0.56211715]
 ,[ 2.4818539  , 0.57809039]
 ,[ 0.38932286 ,1.13333285]
,[-0.36310796,1.31860552]
,[1.42045969,-1.83936151]
,[1.7690534,0.78067889]
,[0.08793204,1.41584454]
,[0.5909056,1.35197316]
,[4.46078745,-0.11141116]
,[0.07499552,0.9852032]
,[1.13332969,1.1330062]
,[-0.66698714,1.36340114]
,[-0.72982232,-0.47603192]
,[0.95214959,1.29085731]
,[-0.1034271,-0.85489476]
,[0.4087041,-0.7995838]
,[-0.63214259,-1.23244546]
,[2.4322142,0.76106814]
,[-1.22412013,-0.78446365]
,[-0.81715947,-0.44682731]
,[-1.58361016,-0.22665038]
,[1.59950295,1.2394246]
,[-0.58576036,1.82357295]
,[-1.69453215,-1.23406844]
,[-1.39132196,-0.78489827]
,[0.12097004,-1.44640381]
,[-1.24065383,-0.83611663]
,[-0.72101756,-0.84413676]
,[1.77684269,0.71338324]
,[0.64033025,0.87214742]
,[3.03172413,0.27227191]
,[-1.80101862,-1.00094465]
,[-1.92327536,-0.50443431]
,[-1.85565006,-0.93329828]
,[-0.78048694,-0.95482965]
,[-1.38983273,-1.06633393]
,[-0.92354374,-1.52102275]
,[-1.70130266,-1.4510812]
,[-0.62174092,-0.60483164]
,[2.1292844,0.80521107]
,[-0.35503448,-0.13084389]
,[-1.20934623,-1.36911411]
,[1.92991317,0.47187322]
,[1.54216728,0.41024326]
,[0.53074151,1.41950832]
,[-2.75966154,-1.04967951]
,[-1.19847935,-0.93608016]
,[-0.55209267,1.59187158]
,[-1.13202869,-1.71227718]
,[-0.56299717,1.71793072]
,[-0.73860238,2.01011981]
,[1.53683157,0.66144768]
])

y=np.array([ 1,  1,-1,-1, 1,-1, 1, 1, 1,-1, 1,-1, 1, 1,-1,-1, 1, 1,-1, 1, 1,-1,-1, 1
  ,1, 1, 1, 1, 1, 1,-1, 1, 1,-1, 1,-1,-1,-1, 1,-1,-1,-1,-1, 1,-1, 1, 1, 1 ,
 -1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1, 1,-1, 1, 1, 1,-1, 1, 1, 1,-1,-1, 1,
  1, 1, 1, 1,-1,-1,-1, 1, 1, 1, 1, 1, 1, 1, 1,-1, 1, 1,-1,-1,-1, 1, 1,-1,
  1,-1,-1,-1])


def f(x,w):
    if w[1]==0:
        w5=0.001
        return (-w[2]-w[0]*x)/w5
    return (-w[2]-w[0]*x)/w[1]


def loss(n,w,X,y):
    somme=0
    for i in range(0,n):
        somme+=np.where(y[i]*np.dot(w, X[i, :])<=0,1,0)
    return somme/n  


ax.set_title("Plot different lines with change in a \n f(x)=wx+b", fontsize=15)


neg_class = (y == -1)
pos_class = (y == 1)
ax.scatter(X[neg_class, 0] ,X[neg_class, 1],color='blue')
ax.scatter(X[pos_class, 0] ,X[pos_class, 1],color='red')
ax.axis('scaled')

n_samples = X.shape[0]
n=n_samples
n_features = X.shape[1]     
      
w = np.zeros((n_features+1,))
print(X,np.ones((n_samples, 1)))
X = np.concatenate([X, np.ones((n_samples, 1))], axis=1)

x = np.linspace(-3,4,40)



losss=loss(n,w,X,y)

lines=ax.plot(x, f(x,w))
i,t=0,0
while losss!=0:
    losss=loss(n,w,X,y)
    for i in range(0,n):
        if y[i]*np.dot(w, X[i, :])<=0:
            lines=[]
            plt.pause(1)
            ax.lines.pop(0)
            print("w : " ,w,"loss : ",losss , "point mal classifie count : " ,t)
            w=w+y[i]*X[i, :]
            lines=ax.plot(x, f(x,w))
            t+=1
        
 
plt.pause(1)
lines=[]
ax.lines.pop(0)
lines=ax.plot(x, f(x,w))
plt.show()







